<?php
/**
 * ========Class 11.2========
 * Class, Object, Method এবং Property নিয়ে পরিচিতি
 * */

class Human{
    public $name;
    function sayHi(){
        echo "Hello\n";
    }
    function sayName(){
        echo "My Name is {$this->name}";
    }
}
class Cat{
    function sayHi(){
        echo "Meow\n";
    }
}
class Doc{
    function sayHi(){
        echo "Woof\n";
    }
}

$h1 = new Human();
$h1->name = "sampad"; // set oparation
$c1 = new Cat();
$c1->sayHi();
//$d = new Doc();

$h1->sayHi();
$h1->sayName();
//echo $h1->name(); //get oparation

/**
 * ========Class 11.3========
 * ক্লাসের কনস্ট্রাকটর মেথড যেটা ক্লাস থেকে অবজেক্ট তৈরী হবার সময় নিজে থেকেই রান হয়
 * */
class HumanNew
{
    public $name;
    public $age;

    public function __construct($personalName, $personAge = 0) // option argument set value
    {
        $this->name = $personalName;
        $this->age = $personAge;
    }

    function sayHi()
    {
        echo "hello\n";
        $this->sayName();
    }

    function sayName()
    {
        if($this->age){
            echo "My name is {$this->name}\n, My age is {$this->age} years old.";
        }else{
            echo "My name is {$this->name}";
        }

    }
}

$h1 = new HumanNew('Sampad', 25);
$h1->sayName();

$h2 = new HumanNew('Ankit', 4);
$h2->sayHi();

/**
 * ========Class 11.4========
 * ক্লাসের পাবলিক এবং প্রাইভেট মেথড এবং প্রোপার্টিজ
 * */
class Fund{
    public $fund; //privet property, method class er baire teke value pass kora jai na.
    function __construct($initialFund)
    {
        $this->fund = $initialFund;
    }

    public function addFund($money){
        $this->fund +=$money;
    }

    public function deductFund($money){
        $this->fund -=$money;
    }

    public function getTotal(){
        echo "Total Fund is {$this->fund}\n";
    }
}

$ourFund = new Fund(100);
$ourFund->fund = 75;
$ourFund->getTotal();
$ourFund->deductFund(10);
$ourFund->getTotal();
/**
 * ========Class 11.5========
 * একটা রিয়াল লাইফ ইউজফুল ক্লাস লেখা
 * */
class RGB
{
    private $color; //#ff0000
    private $red;
    private $green;
    private $blue;

    public function __construct($colorCode = '')
    {
        $this->color = ltrim($colorCode, '#');
        $this->parseColor();
    }

    public function getColor()
    {
        return $this->color;
    }

    public function getRGBColor()
    {
        return array($this->red, $this->green, $this->blue);
    }

    public function readRGBColor()
    {
        echo "Red = {$this->red}\nGreen = {$this->green}\nBlue = {$this->blue}";
    }

    public function setColor($colorCode)
    {
        $this->color = ltrim($colorCode, '#');
        $this->parseColor();
    }

    private function parseColor()
    {
        if ($this->color) {
            list($this->red, $this->green, $this->blue) = sscanf($this->color, '%02x%02x%02x');
        } else {
            list($this->red, $this->green, $this->blue) = array(0, 0, 0);
        }
    }

    public function getRed()
    {
        return $this->red;
    }

    public function getGreen()
    {
        return $this->green;
    }

    public function getBlue()
    {
        return $this->blue;
    }
}

$myColor = new RGB("#ffffff");
$myColor->readRGBColor();
//echo $myColor->getBlue();
/**
 * ========Class 11.6========
 * ইনহেরিটেন্স নিয়ে আলোচনা
 * */
class Animal
{
    protected $name;

    public function __construct($name)
    {
        $this->name = $name;
    }

    public function eat()
    {
        echo "{$this->name} is eating";
    }

    public function run()
    {
        echo "{$this->name} is running";
    }

    public function sleep()
    {
        echo "{$this->name} is sleeping";
    }

    public function greet()
    {

    }

    protected function addTitle($title)
    { // protected method
        $this->name = $title . " " . $this->name;
    }
}

class Human extends Animal
{
    public function greet()
    {
        echo "Hi";
    }

    public function call()
    {
        echo "hello";
    }
}

class Cat extends Animal
{
    public function say()
    {
        $this->addTitle("Mr.");
    }

    public function greet()
    {
        echo "Meow";
    }
}

$sampad = new Human('Sampad');
$sampad->eat();
echo "<br/>";
$mom = new Cat('Mom');
$mom->eat();
echo "<br/>";
$mom->sleep();
echo "<br/>";
$mom->say();
/**
 * ========Class 11.7========
 * প্যারেন্ট এবং চাইল্ড ক্লাসের স্কোপ নিয়ে আলোচনা
 * */
/*
 * parent class এবং child class
 * দুইটা class এর মধ্যে যদি একই method নাম থাকে আর ২য় class মানে child class কে call করে তাহলে parent method call হবে না। parent method টিকে call করতে হলে......
 * */

class parentClass
{
    protected $name;

    public function __construct($name)
    {
        $this->name = $name; // show parent method
        $this->sayHi();
    }

    function sayHi()
    {
        echo "Hi from {$this->name}";
    }
}

class childClass extends parentClass
{
    function sayHi()
    {
        parent::sayHi();  // show parent method
        echo "hello";
    }
}
$cc = new childClass("abcd");
/**
 * ========Class 11.8========
 * ইনহেরিটেন্স নিয়ে আরও উদাহরন
 * */
class Shape{
    protected $name;
    protected $area;

    public function __construct($name)
    {
        $this->name = $name;
        $this->calculateArea();
    }
    public function getArea()
    {
        echo "This {$this->name}'s area is {$this->area}";
    }
    public function calculateArea()
    {
    }

}
class Triangle extends shape{
    private $a, $b, $c;
    public function __construct( $a, $b, $c)
    {
        $this->a = $a;
        $this->b = $b;
        $this->c = $c;
        parent::__construct("Triangle");
    }
    public function calculateArea()
    {
        $perimeter = ($this->a+$this->b+$this->c)/2;
        $this->area = sqrt($perimeter * ($perimeter-$this->a) * ($perimeter - $this->b)* ($perimeter - $this->c));
    }
}
class Rectangle extends shape{
    private $a, $b;
    public function __construct($a, $b)
    {
        $this->a = $a;
        $this->b = $b;
        parent::__construct("Rectangle");
    }
    public function calculateArea()
    {
        $this->area = $this->a * $this->b;
    }
}
$r = new Rectangle(2,4);
$r->getArea();
echo "<br>";
$t = new Triangle(10,12,8);
$t->getArea();
/**
 * ========Class 11.9========
 * oop তে অ্যাবস্ট্রাক্ট ক্লাস এবং অ্যাবস্ট্রাক্ট মেথড
 * অ্যাবস্ট্রাক্ট ক্লাস এ final method
 * */
<?php

// abstract class এর যতগুলা abstract method আছে সবগুলা method child/extends class এ Implement করতে হবে।
// abstract class কে new করে object করা যাবে না echo করা যাবে না extends শুধু করা যাবে
// abstract method protected হলে child class এ protected/public করা যাবে।

abstract class Shape{
    abstract protected function getArea(); // abstract method হল এদের কোন body থাকবে না এদের কে child class এ extends করতে হবে।
    abstract function getPerimeter(); // abstract method না হলে child class এ method টা Implement করতে হবে না।
}
class Rectangle extends Shape{
    private $base, $height;
    function __construct($base, $height)
    {
        $this->base = $base;
        $this->height = $height;
    }
    public function setBase($base){
        $this->base = $base;
    }
    public function setHeight($height){
        $this->height = $height;
    }
    function getArea(){
        return $this->base*$this->height;
    }
    function getPerimeter(){
    }
}
class Triangle extends Shape{
    function getArea(){
    }
    function getPerimeter(){
    }
}
$triangle = new Rectangle(5,8);
echo $triangle->getArea();
/**
 * ========Class 11.10========
 * ইনহেরিটেন্সে ফাইনাল কিওয়ার্ডের ব্যবহার
 * */
// abstract class এ method এ final method use করলে ওই method টি আর child class লেখা লাগেব না।
// এটি normal class এ একই কাজ করে
abstract class one{
   final function m_one(){
        echo "same content for final method";
    }
}
class two extends one{
// m_one method টি call করা লাগেব না
}
$show = new two();
$show ->m_one();
/**
 * ========Class 11.11========
 * কিভাবে ফোর্স করার মাধ্যমে ওওপি দিয়ে বেটার কোড লেখা যায়
 * */
//
class Shape{
}
class Shapes{
    private $shapes;
    function __construct(){
        $this->shapes = [];
    }
    function addShape( Shape $shape ){ // এখানে Shape হল Shape class কে extends করলে এটা count হবে।
        array_push($this->shapes, $shape);
    }
    function totalShapes(){
        return count($this->shapes);
    }
}
class Rectangle extends Shape{
}
class Triangle extends Shape{
}
class Student{
// এখানে Student class Shape class কে extends না করার কারণে এই object টি count হয় নাই।
// কারণ আমরা বলে দিয়েছি addShape method এর ভিতরে Shape class extends করা আছে এমন array pass করা।
}
$shapesCollection = new Shapes();
$shapesCollection->addShape(new Rectangle());
$shapesCollection->addShape(new Triangle());
//$shapesCollection->addShape(new Student()); // Student class Shape class কে extends করে নাই তাই error আসবে
echo $shapesCollection->totalShapes();

/**
 * ========Class 11.12========
 * ইন্টারফেস নিয়ে আলোচনা
 * */
// interface class কে extends করা যায় না implements করা হয়।
// একটা interface class আরেকটা interface class কে extends করতে পারে
// abstract class এর মত interface method এ সবগুলা method child/implements class এ Implement করতে হবে।
interface BaseAnimal{
    function isAlive();
    function canEat($param1, $param2);
    function breed();
}
class Animal implements BaseAnimal{
    function isAlive(){}
    function canEat($pm1, $pm2){}
    function breed(){}
}
interface BaseHuman extends BaseAnimal{
    function canTalk();
}
class Human implements BaseHuman{ // BaseHuman interface এর যত method আছে এবং extends করা class এর method সবগুলা যোগ করতে হবে।
    function isAlive(){}
    function canEat($pm1, $pm2){}
    function breed(){}
    function canTalk(){}
}
$h = new Human();
echo $h instanceof BaseHuman; // $h object কার interface তা check করা যায়।
/**
 * ========Class 11.13========
 * ক্লাসের স্ট্যাটিক মেথড এবং প্রোপার্টিজ
 * class এ স্ট্যাটিক মেথড call করলে তার class কে new দিয়ে object করা লাগে না
 * */
class mathCalculator{
    //private $number;
    static $num;
    static function fibonacci($n){
        //$this->number = 12; // static method তাই এখানে object তৈরি করা হয় নি তাই $this কাজ করবে না।
        self::$num = 6;
        echo $n;
        self::doSomething();
    }
    static function doSomething(){
        echo 'doing something';
    }
    function nomal(){ // static method কে normal method এ call করতে দুইভাবে ই করা যায়
        self::$num = 'sampad'; // static property normal method এইভাবে call করতে হবে।
        //self::doSomething();
        $this->doSomething(); // object করা হলেই $this-> দিয়ে করা যাবে
    }
}
mathCalculator::fibonacci(6);
echo '<br/>';
$n = new mathCalculator();
$n->nomal();
echo '<br/>';
echo mathCalculator::$num; // static method property echo করতে হলে।
echo '<br/>';
/**
 * ========Class 11.14========
 * চাইল্ড ক্লাসে স্ট্যাটিক মেথড ওভাররাইড নিয়ে আলোচনা
 *
 * */
class A{
    static function sayHi(){
        echo "Say hi from A";
    }
}
class B extends A{
    static function sayHi(){
        echo "Say hi from B";
        echo '<br/>';
        parent::sayHi(); // extends করা method কে call করতে।
    }
}
B::sayHi(); // same method হলে শেষ method বেশি priority পাবে।
/**
 * ========Class 11.15========
 * স্ট্যাটিক স্কোপ নিয়ে আলোচনা
 * */
class C{
    //private static $name; // static method এর ক্ষেত্রে static private property করলে শুধু ওই class কাজ করা যাবে extends class এ কাজ করা যাবে না।
    protected static $name; //protected হলে extends class এ call করা যাবে।
    static function sayHi(){
        self::$name = 'privet static method';
        echo "Say hi from A";

    }
}
class D extends C{
    static function sayHi(){
        parent::sayHi();
        echo parent::$name;
        echo "Say hi from B";
    }
}
D::sayHi();


